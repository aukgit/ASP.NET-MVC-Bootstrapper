@model int?
@{
    int i;
    if (!Model.HasValue) {
        i = 0;
    } else {
        i = Model.Value;
    }
    var isRequired = ViewData.ModelMetadata.IsRequired;
    
    string isRequiredStar = isRequired ? "*" : "";
    var htmlAttributes = new RouteValueDictionary();
    if (@ViewData.ModelMetadata.DisplayName == null) {
        ViewData.ModelMetadata.DisplayName = ViewData.ModelMetadata.PropertyName;
    }
    if (ViewBag.@class != null) {
        htmlAttributes.Add("class", "form-control " + ViewBag.@class);
    } else {
        htmlAttributes.Add("class", "form-control");
    }

    if (ViewBag.type != null) {
        htmlAttributes.Add("type", ViewBag.type);
    } else {
        htmlAttributes.Add("type", "number");
    }

    if (ViewBag.placeholder != null) {
        htmlAttributes.Add("placeholder", ViewBag.placeholder);
    } else {
        if (isRequired) {
            htmlAttributes.Add("placeholder", @ViewData.ModelMetadata.DisplayName + isRequiredStar);
        } else {
            htmlAttributes.Add("placeholder", "[" + @ViewData.ModelMetadata.DisplayName + "]");
        }
    }
    if (ViewBag.Value != null) {
        htmlAttributes.Add("Value", ViewBag.Value);
    }

    if (ViewBag.label == null) {
        ViewBag.label = ViewData.ModelMetadata.DisplayName;
    }

    if (ViewBag.labelColumn == null) {
        ViewBag.labelColumn = "col-md-2";
    }
    if (ViewBag.textColumn == null) {
        ViewBag.textColumn = "col-md-10";
    }

    htmlAttributes.Add("title", htmlAttributes["placeholder"]);
}
<div class="form-group form-row @styleProperty"  data-prop="@styleProperty">
    <div class="controls dev-plugin plugin-container int">
        <label class="@ViewBag.labelColumn control-label form-label @styleProperty" for="@styleProperty" data-prop="@styleProperty">
            @ViewBag.label <span class="red">@isRequiredStar</span>
        </label>
        <div class="@ViewBag.textColumn form-input-@ViewData.ModelMetadata.PropertyName">
            @Html.TextBox("", ViewData.TemplateInfo.FormattedModelValue, htmlAttributes)
            @if (description != null) {
                <a data-toggle="tooltip" data-original-title="@description" title="@description" class="tooltip-show">
                    <span class="description-icon"></span></a>
            }
            <a data-toggle="tooltip" title="Validating" data-original-title="Validating" class="tooltip-show CustomValidation @ViewData.ModelMetadata.PropertyName no-hover">
                <span data-display="@ViewData.ModelMetadata.DisplayName" class="CustomValidation @ViewData.ModelMetadata.PropertyName glyphicon glyphicon-refresh glyphicon-spin hide" title="Validating"></span>
            </a>
            @Html.ValidationMessageFor(m => m, null, new {@class = "rounded-3 label label-danger fixed-width-294 validation-box"})
        </div>
    </div>
    @Html.LabelFor(m => m, new {@class = "control-label"})
    <div class="controls">
        @Html.TextBox(
            "",
            ViewData.TemplateInfo.FormattedModelValue,
            htmlAttributes)
        @Html.ValidationMessageFor(m => m, null, new {@class = "help-block"})
    </div>
</div>
