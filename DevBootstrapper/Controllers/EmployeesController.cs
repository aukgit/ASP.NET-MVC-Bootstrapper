#region using block

using System;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using DevBootstrapper.Application;
using DevBootstrapper.Models.Context;
using DevBootstrapper.Models.EntityModel.POCO;
using DevTrends.MvcDonutCaching;

#endregion

namespace DevBootstrapper.Controllers {
    public class EmployeesController : GenericController<NorthwindEntities> {
        #region Constructors

        public EmployeesController() : base(true) {
            ViewBag.controller = ControllerName;
            ViewBag.visibleUrl = ControllerVisibleUrl;
            ViewBag.dropDownDynamic = DropDownDynamic;
            ViewBag.dynamicLoadPartialController = DynamicLoadPartialController;
        }

        #endregion

        #region View tapping

        /// <summary>
        ///     Always tap once before going into the view.
        /// </summary>
        /// <param name="view">Say the view state, where it is calling from.</param>
        /// <param name="employee">Gives the model if it is a editing state or creating posting state or when deleting.</param>
        /// <returns>If successfully saved returns true or else false.</returns>
        private bool ViewTapping(ViewStates view, Employee employee = null, bool entityValidState = true) {
            switch (view) {
                case ViewStates.Index:
                    break;
                case ViewStates.Create:
                    break;
                case ViewStates.CreatePostBefore: // before saving it
                    break;
                case ViewStates.CreatePostAfter: // after saving
                    break;
                case ViewStates.Edit:
                    break;
                case ViewStates.Details:
                    break;
                case ViewStates.EditPostBefore: // before saving it
                    break;
                case ViewStates.EditPostAfter: // after saving
                    break;
                case ViewStates.Delete:
                    break;
            }
            return true;
        }

        #endregion

        #region Save database common method

        /// <summary>
        ///     Better approach to save things into database(than db.SaveChanges()) for this controller.
        /// </summary>
        /// <param name="view">Say the view state, where it is calling from.</param>
        /// <param name="employee">Your model information to send in email to developer when failed to save.</param>
        /// <returns>If successfully saved returns true or else false.</returns>
        private bool SaveDatabase(ViewStates view, Employee employee = null) {
            // working those at HttpPost time.
            switch (view) {
                case ViewStates.Create:
                    break;
                case ViewStates.Edit:
                    break;
                case ViewStates.Delete:
                    break;
            }

            try {
                var changes = db.SaveChanges(employee);
                if (changes > 0) {
                    RemoveOutputCacheOnIndex();
                    RemoveOutputCache(CurrentControllerRemoveOutputCacheUrl);
                    return true;
                }
            } catch (Exception ex) {
                throw new Exception("Message : " + ex.Message + " Inner Message : " + ex.InnerException.Message);
            }
            return false;
        }

        #endregion

        #region Index

        [OutputCache(CacheProfile = "Year")]
        public ActionResult Index() {
            var employees = db.Employees.Include(e => e.Employee2);
            var viewOf = ViewTapping(ViewStates.Index);
            return View(employees.ToList());
        }

        #endregion

        #region Details

        public ActionResult Details(Int32 id) {
            if (id == null) {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            var employee = db.Employees.Find(id);
            if (employee == null) {
                return HttpNotFound();
            }
            var viewOf = ViewTapping(ViewStates.Details, employee);
            return View(employee);
        }

        #endregion

        #region Enums

        internal enum ViewStates {
            Index,
            Create,
            CreatePostBefore,
            CreatePostAfter,
            Edit,
            EditPostBefore,
            EditPostAfter,
            Details,
            Delete,
            DeletePost
        }

        #endregion

        #region Developer Comments - Alim Ul karim

        /*
         *  Generated by Alim Ul Karim on behalf of Developers Organism.
         *  Find us developers-organism.com
         *  https://fb.com/DevelopersOrganism
         *  mailto:alim@developers-organism.com	
         *  Google 'https://www.google.com.bd/search?q=Alim-ul-karim'
         *  First Written : 23 March 2014
         *  Modified      : 03 March 2015
         * * */

        #endregion

        #region Constants and variables

        private const string DeletedError =
            "Sorry for the inconvenience, last record is not removed. Please be in touch with admin.";

        private const string DeletedSaved = "Removed successfully.";
        private const string EditedSaved = "Modified successfully.";

        private const string EditedError =
            "Sorry for the inconvenience, transaction is failed to save into the database. Please be in touch with admin.";

        private const string CreatedError = "Sorry for the inconvenience, couldn't create the last transaction record.";
        private const string CreatedSaved = "Transaction is successfully added to the database.";
        private const string ControllerName = "Employees";

        /// Constant value for where the controller is actually visible.
        private const string ControllerVisibleUrl = "/Employees/";

        private const string CurrentControllerRemoveOutputCacheUrl = "/Partials/GetEmployeeID";
        private const string DynamicLoadPartialController = "/Partials/";
        private readonly bool DropDownDynamic = true;

        #endregion

        #region DropDowns Generate

        #region EmployeesController : DropDowns to paste into the partial

        // [DonutOutputCache(CacheProfile = "YearNoParam")]
        public JsonResult GetReportsTo() {
            var data = db.Employees.Select(n => new {id = n.EmployeeID, display = n.LastName}).ToList();
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        #endregion

        public void GetDropDowns(Employee employee = null) {
            if (employee != null) {
                ViewBag.ReportsTo = new SelectList(db.Employees.ToList(), "EmployeeID", "LastName", employee.ReportsTo);
            } else {
                ViewBag.ReportsTo = new SelectList(db.Employees.ToList(), "EmployeeID", "LastName");
            }
        }

        public void GetDropDowns(Int32 id) {
            ViewBag.ReportsTo = new SelectList(db.Employees.ToList(), "EmployeeID", "LastName");
        }

        #endregion

        #region Index Find - Commented

        /*
        [OutputCache(CacheProfile = "Year")]
        public ActionResult Index(System.Int32 id) {
            var employees = db.Employees.Include(e => e.Employee2).Where(n=> n. == id);
			bool viewOf = ViewTapping(ViewStates.Index);
            return View(employees.ToList());
        }
		*/

        #endregion

        #region Create or Add

        public ActionResult Create() {
            if (DropDownDynamic == false) {
                GetDropDowns();
            }
            var viewOf = ViewTapping(ViewStates.Create);
            return View();
        }

        /*
		public ActionResult Create(System.Int32 id) {        
			if(DropDownDynamic == false){
                GetDropDowns(id);// Generate hidden.
            }
			bool viewOf = ViewTapping(ViewStates.Create);
            return View();
        }
		*/

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(Employee employee) {
            var viewOf = ViewTapping(ViewStates.CreatePostBefore, employee);
            if (DropDownDynamic == false) {
                GetDropDowns(employee);
            }
            if (ModelState.IsValid) {
                db.Employees.Add(employee);
                var state = SaveDatabase(ViewStates.Create, employee);
                if (state) {
                    ViewCommon.SetSavedStatus(ViewBag, CreatedSaved); // Saved Successfully.
                } else {
                    ViewCommon.SetErrorStatus(ViewBag, CreatedError); // Failed to save
                }

                viewOf = ViewTapping(ViewStates.CreatePostAfter, employee, state);
                return View(employee);
            }
            viewOf = ViewTapping(ViewStates.CreatePostAfter, employee, false);
            ViewCommon.SetErrorStatus(ViewBag, CreatedError); // record is not valid for creation
            return View(employee);
        }

        #endregion

        #region Edit or modify record

        public ActionResult Edit(Int32 id) {
            if (id == null) {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            var employee = db.Employees.Find(id);
            if (employee == null) {
                return HttpNotFound();
            }
            var viewOf = ViewTapping(ViewStates.Edit, employee);
            if (DropDownDynamic == false) {
                GetDropDowns(employee); // Generating drop downs
            }
            return View(employee);
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(Employee employee) {
            var viewOf = ViewTapping(ViewStates.EditPostBefore, employee);
            if (ModelState.IsValid) {
                db.Entry(employee).State = EntityState.Modified;
                var state = SaveDatabase(ViewStates.Edit, employee);
                if (state) {
                    ViewCommon.SetSavedStatus(ViewBag, EditedSaved); // Saved Successfully.
                } else {
                    ViewCommon.SetErrorStatus(ViewBag, EditedError); // Failed to Save
                }

                viewOf = ViewTapping(ViewStates.EditPostAfter, employee, state);
                return RedirectToAction("Index");
            }
            viewOf = ViewTapping(ViewStates.EditPostAfter, employee, false);
            if (DropDownDynamic == false) {
                GetDropDowns(employee); // Generating drop downs
            }
            ViewCommon.SetErrorStatus(ViewBag, EditedError); // record not valid for save
            return View(employee);
        }

        #endregion

        #region Delete or remove record

        public ActionResult Delete(int id) {
            var employee = db.Employees.Find(id);
            var viewOf = ViewTapping(ViewStates.Delete, employee);
            return View(employee);
        }

        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id) {
            var employee = db.Employees.Find(id);
            var viewOf = ViewTapping(ViewStates.DeletePost, employee);
            db.Employees.Remove(employee);
            var state = SaveDatabase(ViewStates.Delete, employee);
            if (!state) {
                ViewCommon.SetErrorStatus(ViewBag, DeletedError); // Failed to Save				
                return View(employee);
            }

            return RedirectToAction("Index");
        }

        #endregion

        #region Removing output cache

        public void RemoveOutputCache(string url) {
            HttpResponse.RemoveOutputCacheItem(url);
        }

        public void RemoveOutputCacheOnIndex() {
            var cacheManager = new OutputCacheManager();
            cacheManager.RemoveItems(ControllerName, "Index");
            cacheManager.RemoveItems(ControllerName, "List");
            cacheManager = null;
            GC.Collect();
        }

        #endregion
    }
}